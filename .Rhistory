writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
require(rstan)
install.packages('rstan')
require(rstan)
install.packages('brms')
require(brms)
load("D:/Science_220721/Clanci - in the process/HAM_files/med_result_mm_means_nofans_old.RData")
load("D:/Science_220721/Clanci - in the process/HAM_files/med_result_mm_means_rev.RData")
summary(med_result_mm_means_nofans)
summary(med_result_mm_means_nofans)
summary(med_result_mm_means_rev)
install.packages('modeltools')
require('modeltools')
loo_compare(med_result_mm_means_nofans, med_result_mm_means_rev)
model_original <- add_criterion(med_result_mm_means_nofans, "loo")
model_revision <- add_criterion(med_result_mm_means_rev, "loo")
loo_compare(model_original,model_revision )
cars
data<=cars
data=cars
str(data$speed)
type(data$speed)
class(data$speed)
levels(data$dist)
install.packages('faux')
require(faux)
require(faux)
set.seed(456) #seed specification for the data simulation
#Here I am specifying a correlation matrix for 6 variables. The correlation matrix has 6*6 = 36 values and codes all correlations for variable-by-variable relations. The first value in the first row is correlation of var1 with itself, then we go to var1-var2, var1-var3,... Second row starts with the var2-var1, then var2-var2...
cmat <- c(1, .4,.4, .1, .1, .1,
.4, 1,.3, .1, .1, .1,
.4,.2, 1, .1, .1, .1,
.1,.1,.1,  1, .4, .4,
.1,.1,.1, .4,  1, .2,
.1,.1,.1, .4, .2,  1)
vars<-rnorm_multi(n=100, 6,30,5,cmat) # now we take that correlation matrix and simulate 6 variables with 100 values with mean of 30 and sd of 5.
names(vars)=c('TimeOnTummy','PreciseLegMoves','PreciseHandMoves','Babbling','Screeching','VocalImitation') #Naming of the columns in the vars dataset.
Babies=cbind(Babies,vars)
set.seed(456)
Babies=data.frame(Age=round(runif(100,1,30)), Weight=rnorm(100,4000,500))
Babies$Height=rnorm(100,40+0.2*Babies$Age+0.004*Babies$Weight, 5)
Babies$Gender=rbinom(100,1,0.5)
Babies$Crawl=rbinom(100,1,0.031*Babies$Age+0.00001*Babies$Weight-0.06*Babies$Gender)
Babies$TummySleep=rbinom(100,1,0.5)
Babies$PhysicalSt=rnorm(100,10+0.3*Babies$Height+0.1*Babies$Age-0.06*Babies$Gender+0.15*Babies$TummySleep,5)
Babies$Gender=as.factor(Babies$Gender)
levels(Babies$Gender)=c('Girls','Boys')
require(faux)
set.seed(456) #seed specification for the data simulation
#Here I am specifying a correlation matrix for 6 variables. The correlation matrix has 6*6 = 36 values and codes all correlations for variable-by-variable relations. The first value in the first row is correlation of var1 with itself, then we go to var1-var2, var1-var3,... Second row starts with the var2-var1, then var2-var2...
cmat <- c(1, .4,.4, .1, .1, .1,
.4, 1,.3, .1, .1, .1,
.4,.2, 1, .1, .1, .1,
.1,.1,.1,  1, .4, .4,
.1,.1,.1, .4,  1, .2,
.1,.1,.1, .4, .2,  1)
vars<-rnorm_multi(n=100, 6,30,5,cmat) # now we take that correlation matrix and simulate 6 variables with 100 values with mean of 30 and sd of 5.
names(vars)=c('TimeOnTummy','PreciseLegMoves','PreciseHandMoves','Babbling','Screeching','VocalImitation') #Naming of the columns in the vars dataset.
Babies=cbind(Babies,vars)
View(Babies)
mod1<-'
F1=~PreciseLegMoves+PreciseHandMoves+TimeOnTummy
F2=~Babbling+Screeching+VocalImitation'
require(lavaan)
install.packages('lavaan')
require(lavaan)
fit1<-sem(mod1, data=Babies, group='Crawl')
fit1<-sem(mod1, data=Babies, group='Gender')
fit2<-sem(mod1, data=Babies, group='Gender', group.equal='loadings')
install.packages('semTools')
require(semTools)
partialInvariance(fit1, fit2)
models<-list(fit.configural=fit1, fit.loadings=fit2)
partialInvariance(models)
partialInvariance(models,'metric')
Babies$New=1:3
View(Babies)
Babies$New=1:4
fit1<-sem(mod1, data=Babies, group='New')
fit2<-sem(mod1, data=Babies, group='New', group.equal='loadings')
models<-list(fit.configural=fit1, fit.loadings=fit2)
partialInvariance(models,'metric')
warnings()
load("C:/Users/neman/Downloads/box_scores_2016.RData")
box_scores_2016[[i]]
box_scores_2016[[1]]
box_scores_2016[[1]]=NULL
box_scores_2016[[1]]=NULL
box_scores_2016[[1]]=NULL
box_scores_2016[[1]]=NULL
box_scores_2016[[1]]=NULL
dim(box_scores_2016[[i]])[2]
dim(box_scores_2016[[1]])[2]
for(i in 1:10){
if(dim(box_scores_2016[[i]])[2]==17, names(box_scores_2016[[i]])=c('Names1')
}
for(i in 1:10){
if(dim(box_scores_2016[[i]])[2]==17, names(box_scores_2016[[i]])=c('Names1'),
if(dim(box_scores_2016[[i]])[2]==27, names(box_scores_2016[[i]=c('Names2')]), box_scores_2016[[i]]=NULL))
}
if(dim(box_scores_2016[[i]])[2]==17),1,0)
if(dim(box_scores_2016[[1]])[2]==17),1,0)
dim(box_scores_2016[[1]])[2]
if(dim(box_scores_2016[[1]])[2]==21),1,0)
if(dim(box_scores_2016[[1]])[2]==21,1,0)
dim(box_scores_2016[[1]])[2]==21
if(dim(box_scores_2016[[1]])[2]==21)
,1,0)
if(dim(box_scores_2016[[1]])[2]==21)
if(dim(box_scores_2016[[1]])[2]==21, 1, 0)
ifelse(dim(box_scores_2016[[1]])[2]==21, 1, 0)
for(i in 1:10){
ifelse(dim(box_scores_2016[[i]])[2]==17, names(box_scores_2016[[i]])=c('Names1'),
if(dim(box_scores_2016[[i]])[2]==27, names(box_scores_2016[[i]=c('Names2')]), box_scores_2016[[i]]=NULL))
}
for(i in 1:10){
ifelse(dim(box_scores_2016[[i]])[2]==17, names(box_scores_2016[[i]])=c('Names1'),
ifelse(dim(box_scores_2016[[i]])[2]==27, names(box_scores_2016[[i]=c('Names2')]), box_scores_2016[[i]]=NULL))
}
for(i in 1:10){
ifelse(dim(box_scores_2016[[i]])[2]==17, names(box_scores_2016[[i]])=c('Names1'), NULL
}
Names1=replicate(21,"my_string")
for(i in 1:10){
ifelse(dim(box_scores_2016[[i]])[2]==17, names(box_scores_2016[[i]])=Names1, NULL
}
names(box_scores_2016[[1]])=Names1
for(i in 1:10){
ifelse(dim(box_scores_2016[[i]])[2]==17, names(box_scores_2016[[i]])=Names1, "NULL"}
for(i in 1:10){
ifelse(dim(box_scores_2016[[i]])[2]==17, names(box_scores_2016[[i]])==Names1, "NULL"}
for(i in 1:10){
ifelse(dim(box_scores_2016[[i]])[2]==17, names(box_scores_2016[[i]])=Names1, "NULL"}
names(box_scores_2016[[i]])
names(box_scores_2016[[1]])
names(box_scores_2016[[2]])
names(box_scores_2016[[3]])
for(i in 1:10){
ifelse(dim(box_scores_2016[[i]])[2]==21, names(box_scores_2016[[i]])=Names1, "NULL"}
for(i in 1:10){
ifelse(dim(box_scores_2016[[i]])[2]==21, names(box_scores_2016[[i]])=Names1}
for(i in 1:10){
ifelse(dim(box_scores_2016[[i]])[2]==21, names(box_scores_2016[[i]])=Names1}
for(i in 1:10){
ifelse(dim(box_scores_2016[[i]])[2]==17, list1[[i]]=box_scores_2016[[i]],
ifelse(dim(box_scores_2016[[i]])[2]==27), list2[[i]]=box_scores_2016[[i]]}
for(i in 1:10){
if(dim(box_scores_2016[[i]])[2]==17, list1[[i]]=box_scores_2016[[i]],
if(dim(box_scores_2016[[i]])[2]==27), list2[[i]]=box_scores_2016[[i]]}
for(i in 1:10){
if(dim(box_scores_2016[[i]])[2]==21, list1[[i]]=box_scores_2016[[i]],
if(dim(box_scores_2016[[i]])[2]==27), list2[[i]]=box_scores_2016[[i]]}
if(dim(box_scores_2016[[i]])[2]==21
,1,0)
if(dim(box_scores_2016[[i]])[2]==21,1,0)
dim(box_scores_2016[[i]])[2]
dim(box_scores_2016[[1]])[2]
dim(box_scores_2016[[1]])[2]==21
if(dim(box_scores_2016[[1]])[2]==21,1,0)
if(dim(box_scores_2016[[1]])[2]=21,1,0)
if(dim(box_scores_2016[[1]])[2]<=21,1,0)
if(dim(box_scores_2016[[1]])[2]<=22,1,0)
if(dim(box_scores_2016[[1]])[2]=21){
1}else{
0
}
}
if(dim(box_scores_2016[[1]])[2]=21){
'1'}else{
'0'
}
}
if(dim(box_scores_2016[[1]])[2]=21){
'1'}else{
'0'}
}
if(dim(box_scores_2016[[1]])[2]=21){
'1'}else{
'0'}
}
dimension=dim(box_scores_2106[[1]])
dimension=dim(box_scores_2016[[1]])
dimension=dim(box_scores_2016[[1]])[2]
if(dimension==21)
if(dimension==21){
1}else{0}
}
if(dimension==21){
1}else{0
}
for(i in 1:10){
dimension<-dim(box_scores_2016[[i]])[2]
if(dimension==21, list1[[i]]=box_scores_2016[[i]],
if(dimension==27), list2[[i]]=box_scores_2016[[i]]}
for(i in 1:10){
dimension<-dim(box_scores_2016[[i]])[2]
if(dimension==21){list1[[i]]=box_scores_2016[[i]]}else{
if(dimension==27){list2[[i]]=box_scores_2016[[i]]}
}
}
list1<-list()
list2<-list()
for(i in 1:10){
dimension<-dim(box_scores_2016[[i]])[2]
if(dimension==21){list1[[i]]=box_scores_2016[[i]]}else{
if(dimension==27){list2[[i]]=box_scores_2016[[i]]}
}
}
install.packages('mlogit')
data("HC", package = "mlogit")
HC <- dfidx(HC, varying = c(2:8, 10:16), choice = "depvar")
cooling.modes <- idx(HC, 2) %in% c('gcc', 'ecc', 'erc', 'hpc')
room.modes <- idx(HC, 2) %in% c('erc', 'er'
install.packages('dfidx')
require(dfidx)
data("HC", package = "mlogit")
HC <- dfidx(HC, varying = c(2:8, 10:16), choice = "depvar")
cooling.modes <- idx(HC, 2) %in% c('gcc', 'ecc', 'erc', 'hpc')
room.modes <- idx(HC, 2) %in% c('erc', 'er'
)
HC$icca[! cooling.modes] <- 0
HC$occa[! cooling.modes] <- 0
HC$inc.cooling <- HC$inc.room <- 0
HC$inc.cooling[cooling.modes] <- HC$income[cooling.modes]
HC$inc.room[room.modes] <- HC$income[room.modes]
# create an intercet for cooling modes
HC$int.cooling <- as.numeric(cooling.modes)
View(HC)
HC
getwd()
getwd()
??corpus
install.packages('tm')
require(tm)
?corpus
2*5*4*24
4*5*4*24
4*5*4*24*2.176
6/3
6/4
1.5*5*4*24
2*5*4*24
3700000/400225
3700000/100957
30000000/37
30000000/9
20,000/153
20000/153
30000000/153
20000/1233
30000000/16
20000/522
30000000/38
30000000/139
20000/139
30000000/143
20000/2649
30000000/8
20000/2028
30000000/10
3700000/23794
156/37
156/9
citation(package='base')
0.55*(-0.51)
-.35*.26
-.27*-.32
-0.2805-0.091+0.0864
6*7/2
(6*7)/2
-.27*-.32
-.5*-.5
-.5*.5
install.packages('blogdown')
require(blogdown)
package_version("blogdown")
package_version(blogdown)
packageVersion("blogdown")
134141+94793+19136+47505+4800+1500+9600+9800+3410+1800+600+3180
134141+94793+4800+1500+9600+9800+3410+1800+600+3180
136141+94793+4800+1500+9600+9800+3410+1800+600+3180
19136+47505
set.seed(456) # we can set starting numbers that are used to generate our random values. Random numbers are rarely truly random: https://engineering.mit.edu/engage/ask-an-engineer/can-a-computer-generate-a-truly-random-number/
Babies=data.frame(Age=round(runif(100,1,30)),  Weight=rnorm(100,4000,500)) #We create a new data frame (Babies) where we have Age and Weight as variables. 100 Age values are sampled from random uniform distribution (runif) with lower bound of 1 (minimum) and upper bound of 30 (maximum). 100 Weight values are generated using random normal distribution (rnorm) with mean of 4000 and SD of 500
Babies$Height=rnorm(100,40+0.2*Babies$Age+0.004*Babies$Weight, 5) # Height is generated using random normal distribution where mean is a function of Age and Weight, while SD is 5.
Babies$Gender=factor(rbinom(100,1,0.5)) # 100 Gender values are generated using random binomial function with equal probability of being assigned one or the other sex category
levels(Babies$Gender)=c('Girls','Boys') #We levels function to assign Girls and Boys labels to 1 and 0 levels generated by the function
lm1<-lm(Height~Age, data=Babies)
lm2<-lm(Height~Age+Gender, data=Babies) # linear model where Height is modelleds as a function of Age and Gender
lm2$coefficients
summary(lm2)
0.14040/(s*0.06449)
0.14040/(2*0.06449)
Babies$Height2=as.numeric(scale(Babies$Height))
View(Babies)
lm3<-lm(Height2~Age+Gender, data=Babies) # linear model where Height is modelleds as a function of Age and Gender
lm2$coefficients
lm3<-lm(Height2~Age+Gender, data=Babies) # linear model where Height is modelleds as a function of Age and Gender
lm3$coefficients
Babies$Age2=as.numeric(scale(Babies$Age))
lm3<-lm(Height2~Age2+Gender, data=Babies) # linear model where Height is modelleds as a function of Age and Gender
lm3$coefficients
rm(list=ls(#))
rm(list=ls())
rm(list=ls())
library(blogdown)
new_site(theme = "hugo-apero/hugo-apero",
format = "toml",
sample = FALSE,
empty_dirs = TRUE)
require(stringr)
first<-read.csv('IKdataset01.csv')
first=first[with(first, order(Patient_ID)),]
head(first)
second<-read.csv('IKdataset02.csv')
second=second[with(second, order(Patient_ID)),]
head(second)
third<-read.csv('IKdataset03.csv')
third=third[with(third, order(Patient_ID)),]
head(third)
fourth<-read.csv('IKdataset04.csv')
fourth$line=0:1131
#fourth=fourth[with(fourth, order(Patient_ID)),]
#head(fourth)
dat1<-merge(first, second, by='Patient_ID')
dat2=merge(dat1, third, by='Patient_ID')
cor(dat2$MI, third$MI)
varyingList=list(weight=c('weight0','weight1','weight2','weight3','weight4','weight5','weight6'),sbp=c('sbp0','sbp1','sbp2','sbp3','sbp4','sbp5','sbp6'),dbp=c('dbp0','dbp1','dbp2','dbp3','dbp4','dbp5','dbp6'),hrate=c('hrate0','hrate1','hrate2','hrate3','hrate4','hrate5','hrate6'),egfr=c('egfr0','egfr1','egfr2','egfr3','egfr4','egfr5','egfr6'),a1c=c('a1c0','A1c1','A1c2','A1c3','A1c4','A1c5','A1c6'),dmmed=c('dmmed0','dmmed1','dmmed2','dmmed3','dmmed4','dmmed5','dmmed6'),ldl=c('LDL0','LDL1','LDL2','LDL3','LDL4','LDL5','LDL5'),HDL=c('HDL0','HDL1','HDL2','HDL3','HDL4','HDL5','HDL6'),chol=c('chol0','chol1','chol2','chol3','chol4','chol5','chol6'),trig=c('trig0','trig1','trig2','trig3','trig4','trig5','trig6'))
datN<-reshape(dat2,varying = varyingList,v.names = c('weight','sbp','dbp','hrate','egfr','a1c','dmmed','ldl','hdl','chol','trig'), direction='long')
attach("~/.julia/v0.6/MixedModels/test/dat.rda")
install.packages('JuliaCall')
require(JuliaCall)
install_julia
install_julia()
julia<-julia_setup()
julia
julia_command("a = sqrt(2);"); julia_eval("a")
attach("~/.julia/v0.6/MixedModels/test/dat.rda")
julia_install_package("MixedModels")
attach("~/.julia/v0.6/MixedModels/test/dat.rda")
data(package='lme4')
sleepstudy
data(sleepstudy)
sleep=sleepstudy
sleep=data(sleepstudy)
sleep=data(package='lme4',sleepstudy)
sleep
julia$library("MixedModels")
require(lme4)
mod1<-lmer(Reaction~Days+(1|Subject), data=sleepstudy)
j$assign("form", formula(mod1))
julia$assign("form", formula(mod1))
julia$assign("sleepstudy", sleepstud)
julia$assign("sleepstudy", sleepstudy)
j$eval("@elapsed fm1 = fit(LinearMixedModel, form, sleepstudy)")
julia$eval("@elapsed fm1 = fit(LinearMixedModel, form, sleepstudy)")
julia$eval("fm1")
sumarry(mod1)
summary(mod1)
ln(3.36)
log(3.36)
load("C:/Users/neman/Downloads/CR3_withadditionalSolvers (1).RData")
require(mgcv)
gam1<-gam(Percentage~s(Bin_scale, by=AOI), data=dat_CR3)
summary(gam1)
gam1$residuals
gam1$fitted.values
ranef(gam1)
install.packages('gammit')
require(itsadug)
gam1<-gam(Percentage~s(Bin_scale, by=AOI)+s(ParticipantID,bs='re'), data=dat_CR3)
ranef(gam1)
inspect_random(gam1)
gam1<-gam(Percentage~s(Bin_scale)+s(ParticipantID,bs='re'), data=dat_CR3)
inspect_random(gam1)
inspect_random(gam1, select=4)
inspect_random(gam1, select=2)
inspect_random(gam1, select=3)
inspect_random(gam1, xlim=c(0,100))
plot_smooth(gam1, view='Bin')
plot_smooth(gam1, view='Bin_scale')
inspect_random(gam1, view='Bin_scale')
par(mfrow=c(1,2), cex=1.1)
plot_smooth(gam1, view='Bin_scale')
inspect_random(m1, select=4)
inspect_random(gam1, select=4)
inspect_random(gam1, select=2)
?rnorm
plot(dnorm(1000,mean=0, sd=1))
plot(pnorm(1000,mean=0, sd=1))
plot(rnorm(1000,mean=0, sd=1))
plot(density(rnorm(1000,mean=0, sd=1)))
plot(density(rnorm(10000,mean=0, sd=1)))
3.70*3.70+3.51*3.70+2.91*2.30+2.91*1.30+3.51*3.70+4.10*2.69+1.60*3.57
require(faux)
set.seed(456)
cmat <- c(1, .4,.4, .1, .1, .1,
.4, 1,.3, .1, .1, .1,
.4,.2, 1, .1, .1, .1,
.1,.1,.1,  1, .4, .4,
.1,.1,.1, .4,  1, .2,
.1,.1,.1, .4, .2,  1)
vars<-rnorm_multi(n=100, 6,30,5,cmat)
names(vars)=c('TimeOnTummy','PreciseLegMoves','PreciseHandMoves','Babbling','Screeching','VocalImitation')
Babies=cbind(Babies,vars)
cov(vars)
Matrix<-cov(vars)
Matrix[upper.tri(Matrix)]<-NA
knitr::kable(Matrix, format = 'html')
setwd('D:\\Science_220721\\Teaching (Sheffield)\\Advanced statistics\\AS_2022\\Course Materials\\Rcode')
D:\Science_220721\Teaching (Sheffield)\Advanced statistics\AS_2022\Course Materials\Rcode
require(foreign)  #to read-in the data that are SPSS format (.sav) we need foreign package
mwell <- read.spss("data.sav", to.data.frame = T)  #read.spss function and we specify that we should read it as a data frame
dim(mwell)
mwell$Total = mwell$Watchwe_adj + mwell$Watchwk_adj + mwell$Comphwe_adj + mwell$Comphwk_adj +
mwell$Smartwe_adj + mwell$Smartwk_adj  #total amount of time spent watching screen in
table(is.na(mwell$mwb))
mwell2 = mwell[!is.na(mwell$mwb) & !is.na(mwell$Total), ]  # we are trying to subset our data frame and take only values that are not NAs. is.na is a boolean function that tells us whether one row is NA or not (TRUE or FALSE). !is.na indicates that we do not want TRUE na.values. We also have a logical parameter & that combines two conditions !is.na(outcome) & !is.na(predictor). Finally, we would like to filter our dataset by row and exclude all the rows that have either TRUE value in our predictor or our outcome. Therefore, we are looking at rows mwell[function goes here,] instead of mwell[,function goes here ] which would look at columns
dim(mwell2)  #
cor(mwell2$mwb, mwell2$Total)
par(mfrow = c(1, 1), bty = "n", mar = c(5, 4, 0.1, 0.1), cex = 1.1, pch = 16)
plot(mwell2$Total[1:500], mwell2$mwb[1:500])
table(mwell2$Ethnicg)
table(mwell2$REGION)
require(lme4)
MWmod1 <- lmer(mwb ~ (1 | LANAME), data = mwell2)
summary(MWmod1)
require(MuMIn)
r.squaredGLMM(MWmod3c)
r.squaredGLMM(MWmod1)
MWmod2 <- lmer(mwb ~ (1 | LANAME) + (1 | Ethnicg), data = mwell2)
ranef(MWmod2)
summary(MWmod2)
summary(MWmod1)
summary(MWmod2)
MWmod3 <- lmer(mwb ~ (1 | REGION/LANAME) + (1 | Ethnicg), data = mwell2)
anova(MWmod1, MWmod2, MWmod3)
MWmod2a <- lmer(mwb ~ Total + (1 | LANAME) + (1 | Ethnicg), data = mwell2)  #main effect of total
print(summary(MWmod2a), cor = F)
MWmod2b <- lmer(mwb ~ Total + male + (1 | LANAME) + (1 | Ethnicg), data = mwell2)  #main effect of total and main effect of sex
MWmod2c <- lmer(mwb ~ Total * male + (1 | LANAME) + (1 | Ethnicg), data = mwell2)  #interaction between total and sex
anova(MWmod2a, MWmod2b, MWmod2c)
print(summary(MWmod2c), cor = F)
MWmod3c <- lmer(mwb ~ Total * male + (1 + Total | LANAME) + (1 | Ethnicg), data = mwell2)
MWmod3c <- lmer(mwb ~ Total * male + (1| LANAME) + (1  + Total  | Ethnicg), data = mwell2)
summary(MWmod3c)
require(sjPlot)
plot_model(MWmod3c, type = "re", sort.est = "sort.all", grid = FALSE)[1]
require(sjPlot)
plot_model(MWmod3c, type = "re", sort.est = "sort.all", grid = FALSE)
MWmod3c <- lmer(mwb ~ Total * male + (1| LANAME) + (0 + Total  | Ethnicg), data = mwell2)
summary(MWmod3c)
MWmod3c <- lmer(mwb ~ Total * male + (1| LANAME) + (1|Ethnicg)+ (0 + Total  | Ethnicg), data = mwell2)
summary(MWmod3c)
MWmod3c <- lmer(mwb ~ Total + (1| LANAME) + (1|Ethnicg)+ (0 + Total  | Ethnicg), data = mwell2)
summary(MWmod3c)
MWmod3c <- lmer(mwb ~ Total + (1| LANAME) + (1|Ethnicg), data = mwell2)
summary(MWmod3c)
MWmod3a <- lmer(mwb ~ (1| LANAME) + (1|Ethnicg), data = mwell2)
summary(MWmod3a)
summary(MWmod3c)
